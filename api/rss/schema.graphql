schema {
    query: Query
    mutation: Mutation
}

type BlogEntry {
    id: ID!
    pub_name: String!
    pub_url: String
    title: String!
    description: String!
    is_content: Boolean!
    pub_date: String!
    text: String!
    url: String!
    author: String!
}

input BlogEntryInput {
    id: ID
    pub_name: String!
    pub_url: String
    title: String!
    description: String!
    pub_date: String!
    text: String!
    url: String!
    author: String!
}

type BlogEntryResult {
    success: Boolean!
    errors: [String]
    entries: BlogEntry
}

type BlogEntriesResult {
    success: Boolean!
    errors: [String]
    entries: [BlogEntry]
}

type SimpleFeedsResult {
    success: Boolean!
    errors: [String]
    entries: [SimpleFeed]
    bozos: [String]
}

type User {
    id: ID!
    email: String!
    password: String!
}

type UserResult {
    success: Boolean!
    errors: [String]
    user: User
 }

type Categories {
    success: Boolean!
    errors: [String]
    categories: [String!]
}


type SignInResponse {
    token: String
    errors: [String]
}

type SignUpResponse {
    token: String
    errors: [String]
}

type SimpleFeed {
    title: String!
    url: String!
    description: String!
}

type checkFeedResult {
    result: Boolean
    success: Boolean!
    errors: [String]
}

type leaderboardResult {
    success: Boolean!
    errors: [String]
    feeds: [SimpleFeed]
}

type titleListResult {
    success: Boolean!
    errors: [String]
    feeds: [SimpleFeed]
}

type emailResult {
    success: Boolean!
    errors: [String]
    email: String
}

type Query {
    entries: BlogEntriesResult
    pub_entries(url: String!): BlogEntriesResult
    personal_entries(token: String!): BlogEntriesResult
    blogEntry(entryId: ID!): BlogEntryResult!
    fetch_categories(token: String!): Categories!
    category_entries(token: String!, category: String): BlogEntriesResult
    saved_entries(token: String!): BlogEntriesResult
    user(email: String!, password: String!): UserResult
    users: [User]
    allFeeds: [SimpleFeed]
    allUserFeeds(token: String!): titleListResult!
    checkForFeed(url: String!, token: String!): checkFeedResult!
    fetchLeaderboard: leaderboardResult
    get_email(token: String!): emailResult
    get_latest_time: time
}

type DeleteEntryResult {
    success: Boolean!
    errors: [String]
}

type saveResult {
    success: Boolean!
    errors: [String]
    url: String
}
scalar DateTime
type time {
    timestamp: DateTime!
}


type Mutation {
    createBlogEntry(url: String!): BlogEntryResult!
    createBulkEntry(bulkString: String!): SimpleFeedsResult!
    createPersonalEntry(url: String!, token: String!): BlogEntryResult!
    createCategoryEntry(url: String!, token: String!, category: String!): BlogEntryResult!
    createCategoriesEntry(url: String!, token: String!, categories: [String]!): BlogEntryResult!
    deleteBlogEntry(url: String!, token: String!): DeleteEntryResult!
    saveArticle(article: BlogEntryInput!, token: String!): saveResult!
    signUp(email: String!, password: String!): SignUpResponse
    signIn(email: String!, password: String!): SignInResponse
}